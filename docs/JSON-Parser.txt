-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/rmehri01/JSON-Parser#readme</a>
@package JSON-Parser
@version 0.0.0


-- | This module is for setting up the built in token functions with the
--   default haskell language lexer More information at:
--   <a>https://hackage.haskell.org/package/parsec/docs/Text-ParserCombinators-Parsec-Token.html</a>
module Tokens

module Parser
data JValue
JNull :: JValue
JBool :: Bool -> JValue
JNumber :: Double -> JValue
JString :: String -> JValue
JArray :: [JValue] -> JValue
JObject :: [(String, JValue)] -> JValue

-- | Type alias for Parsec that takes a String as input and outputs
--   <tt>a</tt> Does not utilize the user state, as given by the ()
type Parser a = Parsec String () a

-- | Only parses the keyword null with no whitespace
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jNullParser "null"
--   JNull
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jNullParser "foo"
--   parse error at (line 1, column 1):
--   unexpected "f"
--   expecting "null"
--   </pre>
jNullParser :: Parser JValue

-- | Parses either true or false with no whitespace
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jBoolParser "true"
--   JBool True
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jBoolParser "bar"
--   parse error at (line 1, column 1):
--   unexpected "b"
--   expecting "true" or "false"
--   </pre>
jBoolParser :: Parser JValue

-- | Parses a double or integer value
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jNumberParser "-23.6"
--   JNumber (-23.6)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jNumberParser "42"
--   JNumber 42.0
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jNumberParser "baz"
--   parse error at (line 1, column 1):
--   unexpected "b"
--   expecting "-", float or natural
--   </pre>
jNumberParser :: Parser JValue

-- | Parses a string with double quotes around it, returning what is inside
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jStringParser  "\"hello\""
--   JString "hello"
--   </pre>
--   
--   This example is missing the double quotes: &gt;&gt;&gt; parseTest
--   jStringParser "hello" parse error at (line 1, column 1): unexpected
--   "h" expecting literal string
jStringParser :: Parser JValue

-- | Parses any string with double quotes around it, returning what is
--   inside Currently only works for whitespace escaped characters such as
--   'n' Other escaped characters will remain in their raw form
stringLiteral :: Parser String

-- | Parses an array surrounded by brackets and separated by commas and
--   whitespace
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jArrayParser  "[1, 2, 3, 4]"
--   JArray [JNumber 1.0,JNumber 2.0,JNumber 3.0,JNumber 4.0]
--   </pre>
--   
--   Since it is a JSON, there can be different types within the array:
--   &gt;&gt;&gt; parseTest jArrayParser "[1, true, null, "hello"]" JArray
--   [JNumber 1.0,JBool True,JNull,JString "hello"]
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jArrayParser  "1, true, null, \"hello\"]"
--   parse error at (line 1, column 1):
--   unexpected "1"
--   expecting "["
--   </pre>
jArrayParser :: Parser JValue

-- | Parses an object of String and JValue pairs surrounded by braces and
--   separated by commas and whitespace
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jObjectParser "{ \"first\" : 24, \"second\" : null }"
--   JObject [("first",JNumber 24.0),("second",JNull)]
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; parseTest jObjectParser " \"first\" : 24, \"second\" : null }"
--   parse error at (line 1, column 1):
--   unexpected " "
--   expecting "{"
--   </pre>
jObjectParser :: Parser JValue

-- | Combines all parsers into a single JSON parser that allows for any
--   amount of whitespace between them
jValueParser :: Parser JValue

-- | Runs the given parser on a string and returns the resulting JValue or
--   error
runJsonParser :: String -> Parser JValue -> Either ParseError JValue

-- | Runs jValueParser on the given string and returns the resulting JValue
--   or an error
parseJson :: String -> Either ParseError JValue
instance GHC.Classes.Eq Parser.JValue
instance GHC.Show.Show Parser.JValue
